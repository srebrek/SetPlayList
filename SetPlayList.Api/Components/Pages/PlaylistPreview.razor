@page "/setplaylist/preview/{SetlistId}"
@attribute [StreamRendering()]
@using SetPlayList.Core.Interfaces
@using SetPlayList.Core.Models
@using System.ComponentModel.DataAnnotations
@using SetPlayList.Api.Support;

@inject ISpotifyPlaylistService PlaylistService
@inject ISpotifyAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>SetPlayList</PageTitle>


@if (playlistPreview is not null && formModel is not null && !playlistSaved)
{
    <article class="fade-in">
        <div class="px-md-3">
            <h2 class=" my-3 display-5 fw-bold mb-4">Playlist Preview</h2>

            <EditForm EditContext="@editContext" FormName="PlaylistForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
            
                <div class="mb-3">
                    <label for="nameInput" class="form-label">Playlist Name</label>
                    <InputText type="text" class="form-control" id="nameInput" @bind-Value="formModel.PlaylistName"/>
                    <ValidationMessage For="() => formModel.PlaylistName" />
                </div>

                @for (var i = 0; i < playlistPreview.Tracks.Count; i++)
                {
                    var index = i;
                    var trackProposal = playlistPreview.Tracks[index];
                    <hr />

                    <div class="d-flex flex-column align-items-center mb-2">
                        <div>
                            @if (trackProposal.OriginalSong.IsTape)
                            {
                                <i class="bi bi-cassette-fill me-3"></i>
                            }
                            <strong>@trackProposal.OriginalSong.Name</strong>
                        </div>
                        @if (trackProposal.OriginalSong.With is not null)
                        {
                            <div class="ms-md-3"><em>with: @trackProposal.OriginalSong.With</em></div>
                        }
                        @if (trackProposal.OriginalSong.OriginalArtist is not null)
                        {
                            <div class="ms-md-3"><em>cover: @trackProposal.OriginalSong.OriginalArtist</em></div>
                        }
                    </div>

                    <div class="d-flex justify-content-around gap-2 overflow-auto">
                        <InputRadioGroup Name="@($"formModel.{nameof(formModel.TrackSelections)}[{index}]")" @bind-Value="formModel.TrackSelections[index]">
                            @for (var j = 0; j < playlistPreview.Tracks[index].SpotifyOptions.Count; j++)
                            {
                                var jdex = j;
                                var spotifyOption = playlistPreview.Tracks[index].SpotifyOptions[j];
                                var sId = spotifyOption.Id;

                                <label for="@($"radio-{jdex}-{index}")">
                                    <div class="card shadow" style="width: 12rem; background-color: var(--bs-secondary-bg);">
                                        <img src="@spotifyOption.AlbumImageUrl" class="card-img-top" alt="album image">
                                        <div class="card-body vstack">
                                            <h6>@spotifyOption.Name</h6>
                                            <p>@spotifyOption.AlbumName</p>
                                            <p><em>@string.Join(", ", spotifyOption.Artists)</em></p>
                                            <InputRadio id="@($"radio-{jdex}-{index}")"
                                                        Value="@sId"
                                                        class="form-check-input form-check-input-warning" />
                                        </div>
                                        
                                    </div>
                                </label>
                            }
                        </InputRadioGroup>
                    </div>
                }
                <div class="text-center my-3">
                    <button type="submit" class="btn btn-warning">Submit</button>
                </div>
            </EditForm>
        </div>
    </article>
}
else if (loginUrl is not null)
{
    <article class="fade-in">
        <h2 class=" my-3 display-5 fw-bold mb-4">Playlist Preview</h2>
        <p>
            <a href="@loginUrl" class="link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">You have to be logged in to Spotify first...</a>
        </p>

    </article>
}
else if (playlistSaved)
{
    <article class="fade-in">
        <h2 class=" my-3 display-5 fw-bold mb-4">Playlist Preview</h2>
        <div class="alert alert-warning" role="alert">
            Playlist "<strong>@formModel.PlaylistName</strong>" saved on your Spotify profile.
        </div>
    </article>
}
else
{
    <article class="fade-in">
        <h2 class=" my-3 display-5 fw-bold mb-4">Playlist Preview</h2>

        <div class="spinner-border text-warning justify-center" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </article>
}





@code {
    [Parameter]
    public string? SetlistId { get; set; }

    private ProposedPlaylist? playlistPreview { get; set; }

    [SupplyParameterFromForm]
    private PlaylistFormModel? formModel { get; set; }

    private string? AccessToken;

    private string? loginUrl;

    private bool playlistSaved;

    private EditContext? editContext;

    private bool invalidSubmit;
    private bool loggedIn;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext is null)
        {
            return;
        }

        AccessToken = await AuthService.GetCurrentAccessTokenAsync(httpContext);
        if (string.IsNullOrEmpty(AccessToken))
        {
            loginUrl = "/auth/spotify/login";
            loggedIn = false;
            return;
        }

        (playlistPreview, var httpStatusCode) = await PlaylistService.GeneratePreviewAsync(SetlistId!, AccessToken);

        if (formModel is not null)
        {
            playlistPreview.Name = formModel.PlaylistName;
            for (int i = 0; i < playlistPreview.Tracks.Count; i++)
            {
                playlistPreview.Tracks[i].SelectedTrackId = formModel.TrackSelections[i];
            }
        }
        else
        {
            formModel = new();
            formModel.PlaylistName = playlistPreview.Name;
            for (int i = 0; i < playlistPreview.Tracks.Count; i++)
            {
                formModel.TrackSelections.Add(playlistPreview.Tracks[i].SpotifyOptions.FirstOrDefault()?.Id);
            }
        }
        editContext = new(formModel);
        editContext.SetFieldCssClassProvider(new BootstrapFieldCssClassProvider());
    }

    private async Task HandleValidSubmit()
    {
        await PlaylistService.CreatePlaylistOnSpotifyAsync(playlistPreview, AccessToken);

        playlistSaved = true;
    }

    private Task HandleInvalidSubmit()
    {
        invalidSubmit = true;
        return Task.CompletedTask;
    }

    public class PlaylistFormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(255)]
        public string? PlaylistName { get; set; }

        public List<string> TrackSelections { get; set; } = new();
    }
}

<style>
    .form-check-input-warning {
    }

        .form-check-input-warning:checked {
            background-color: var(--bs-warning);
            border-color: var(--bs-warning);
        }

        .form-check-input-warning:focus {
            border-color: var(--bs-warning);
            box-shadow: 0 0 0 0.25rem rgba(var(--bs-warning-rgb), .25);
        }

    .validation-message {
        color: var(--bs-form-invalid-color);
    }
</style>